# -*- coding: utf-8 -*-
"""
Constantes para o Sistema RAG do Recoloca.ai

Este m√≥dulo define todas as constantes utilizadas pelo sistema RAG,
incluindo caminhos, configura√ß√µes de modelos e par√¢metros de indexa√ß√£o.

Autor: @AgenteM_DevFastAPI
Vers√£o: 1.0
Data: Junho 2025
"""

import os
from pathlib import Path

# =============================================================================
# CAMINHOS E DIRET√ìRIOS
# =============================================================================

# Diret√≥rio raiz do projeto RAG
RAG_ROOT_DIR = Path(__file__).parent.parent

# Diret√≥rios de dados
SOURCE_DOCUMENTS_DIR = RAG_ROOT_DIR / "source_documents"
DATA_INDEX_DIR = RAG_ROOT_DIR / "data_index"
FAISS_INDEX_DIR = DATA_INDEX_DIR / "faiss_index_bge_m3"
LOGS_DIR = RAG_ROOT_DIR / "logs"

# Subdiret√≥rios de documentos (estrutura reorganizada)
DOCUMENTACAO_CENTRAL_DIR = SOURCE_DOCUMENTS_DIR / "00_Documentacao_Central"
GESTAO_PROCESSOS_DIR = SOURCE_DOCUMENTS_DIR / "01_Gestao_e_Processos"
REQUISITOS_ESPECIFICACOES_DIR = SOURCE_DOCUMENTS_DIR / "02_Requisitos_e_Especificacoes"
ARQUITETURA_DESIGN_DIR = SOURCE_DOCUMENTS_DIR / "03_Arquitetura_e_Design"
PADROES_GUIAS_DIR = SOURCE_DOCUMENTS_DIR / "04_Padroes_e_Guias"
TECH_STACK_DIR = SOURCE_DOCUMENTS_DIR / "05_Tech_Stack"
AGENTES_IA_DIR = SOURCE_DOCUMENTS_DIR / "06_Agentes_e_IA"
UX_DESIGN_DIR = SOURCE_DOCUMENTS_DIR / "07_UX_e_Design"
CONHECIMENTO_ESPECIALIZADO_DIR = SOURCE_DOCUMENTS_DIR / "08_Conhecimento_Especializado"

# =============================================================================
# CONFIGURA√á√ïES DO MODELO DE EMBEDDING
# =============================================================================

# Modelo de embedding principal
EMBEDDING_MODEL_NAME = "BAAI/bge-m3"

# Configura√ß√µes do modelo
EMBEDDING_MODEL_CONFIG = {
    "model_name": EMBEDDING_MODEL_NAME,
    "model_kwargs": {
        "device": "cuda",  # Usar GPU se dispon√≠vel
        "trust_remote_code": True
    },
    "encode_kwargs": {
        "normalize_embeddings": True,
        "batch_size": 32
    }
}

# =============================================================================
# CONFIGURA√á√ïES DE CHUNKING
# =============================================================================

# Configura√ß√µes para divis√£o de documentos
CHUNK_SIZE = 1000  # Tamanho do chunk em caracteres
CHUNK_OVERLAP = 200  # Sobreposi√ß√£o entre chunks
SEPARATORS = ["\n\n", "\n", ".", "!", "?", ",", " ", ""]  # Separadores para chunking

# =============================================================================
# CONFIGURA√á√ïES DO FAISS
# =============================================================================

# Configura√ß√µes do √≠ndice FAISS
FAISS_INDEX_TYPE = "IndexFlatIP"  # Inner Product para embeddings normalizados
FAISS_METRIC_TYPE = "METRIC_INNER_PRODUCT"

# Nomes dos arquivos do √≠ndice
FAISS_INDEX_FILE = "faiss_index.bin"
FAISS_METADATA_FILE = "metadata.json"
FAISS_DOCUMENTS_FILE = "documents.json"

# =============================================================================
# CONFIGURA√á√ïES DE BUSCA
# =============================================================================

# Par√¢metros padr√£o para busca
DEFAULT_TOP_K = 5  # N√∫mero padr√£o de resultados retornados
MAX_TOP_K = 20     # N√∫mero m√°ximo de resultados permitidos
MIN_SIMILARITY_SCORE = 0.3  # Score m√≠nimo de similaridade

# =============================================================================
# CONFIGURA√á√ïES DE LOGGING
# =============================================================================

# Configura√ß√µes de log
LOG_LEVEL = "INFO"
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

# Arquivos de log
INDEXER_LOG_FILE = LOGS_DIR / "rag_indexer.log"
RETRIEVER_LOG_FILE = LOGS_DIR / "rag_retriever.log"
MCP_SERVER_LOG_FILE = LOGS_DIR / "mcp_server.log"
PERFORMANCE_LOG_FILE = LOGS_DIR / "performance.log"

# =============================================================================
# CONFIGURA√á√ïES DE PERFORMANCE
# =============================================================================

# Timeouts e limites
QUERY_TIMEOUT = 30  # Timeout para consultas em segundos
MAX_BATCH_SIZE = 100  # Tamanho m√°ximo do batch para processamento
CACHE_SIZE = 1000  # Tamanho do cache de consultas

# =============================================================================
# EXTENS√ïES DE ARQUIVO SUPORTADAS
# =============================================================================

SUPPORTED_EXTENSIONS = {
    ".md": "markdown",
    ".txt": "text",
    ".pdf": "pdf",
    ".docx": "docx",
    ".html": "html"
}

# =============================================================================
# METADADOS PADR√ÉO
# =============================================================================

# Campos de metadados para documentos
METADATA_FIELDS = [
    "source",      # Caminho do arquivo fonte
    "title",       # T√≠tulo do documento
    "section",     # Se√ß√£o do documento
    "chunk_id",    # ID √∫nico do chunk
    "timestamp",   # Timestamp de indexa√ß√£o
    "file_type",   # Tipo do arquivo
    "file_size",   # Tamanho do arquivo
    "category",    # Categoria do documento (PM, UX, Tech, etc.)
    "language",    # Idioma do documento
    "version"      # Vers√£o do documento
]

# Categorias de documentos
DOCUMENT_CATEGORIES = {
    "PM_Knowledge": "product_management",
    "UX_Knowledge": "user_experience",
    "Tech_Stack": "technical",
    "API_Specs": "api_specification",
    "ERS": "requirements",
    "HLD": "architecture",
    "STYLE_GUIDE": "design_system",
    "GUIA_AVANCADO": "methodology"
}

# =============================================================================
# CONFIGURA√á√ïES DO MCP SERVER
# =============================================================================

# Configura√ß√µes do servidor MCP
MCP_SERVER_NAME = "rag_recoloca"
MCP_SERVER_VERSION = "1.0.0"
MCP_SERVER_DESCRIPTION = "RAG Server para Recoloca.ai - Acesso √† base de conhecimento"

# Tools dispon√≠veis via MCP
MCP_TOOLS = [
    "rag_query",
    "rag_search_by_document", 
    "rag_get_document_list",
    "rag_reindex"
]

# =============================================================================
# CONFIGURA√á√ïES DE AMBIENTE
# =============================================================================

# Vari√°veis de ambiente
CUDA_VISIBLE_DEVICES = os.getenv("CUDA_VISIBLE_DEVICES", "0")
HUGGINGFACE_HUB_CACHE = os.getenv("HUGGINGFACE_HUB_CACHE", str(RAG_ROOT_DIR / ".cache"))

# Verifica√ß√£o de GPU
USE_GPU = True  # Ser√° verificado dinamicamente no embedding_model.py

# =============================================================================
# MENSAGENS E TEMPLATES
# =============================================================================

# Mensagens de status
STATUS_MESSAGES = {
    "indexing_start": "üöÄ Iniciando indexa√ß√£o da base de conhecimento...",
    "indexing_complete": "‚úÖ Indexa√ß√£o conclu√≠da com sucesso!",
    "indexing_error": "‚ùå Erro durante a indexa√ß√£o: {error}",
    "query_start": "üîç Processando consulta: {query}",
    "query_complete": "‚úÖ Consulta processada. {count} resultados encontrados.",
    "query_error": "‚ùå Erro durante a consulta: {error}",
    "gpu_available": "üöÄ GPU detectada e dispon√≠vel para FAISS",
    "gpu_unavailable": "‚ö†Ô∏è GPU n√£o dispon√≠vel, usando CPU",
    "model_loading": "üì• Carregando modelo de embedding: {model}",
    "model_loaded": "‚úÖ Modelo carregado com sucesso"
}

# Template para formata√ß√£o de resultados
RESULT_TEMPLATE = """
**Documento:** {source}
**Se√ß√£o:** {section}
**Relev√¢ncia:** {score:.3f}
**Conte√∫do:**
{content}
---
"""

# =============================================================================
# VALIDA√á√ïES E VERIFICA√á√ïES
# =============================================================================

def create_directories():
    """Cria os diret√≥rios necess√°rios se n√£o existirem."""
    directories = [
        DATA_INDEX_DIR,
        FAISS_INDEX_DIR,
        LOGS_DIR
    ]
    
    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)

def validate_environment():
    """Valida se o ambiente est√° configurado corretamente."""
    errors = []
    
    # Verificar se o diret√≥rio de documentos existe
    if not SOURCE_DOCUMENTS_DIR.exists():
        errors.append(f"Diret√≥rio de documentos n√£o encontrado: {SOURCE_DOCUMENTS_DIR}")
    
    # Verificar se h√° documentos para indexar
    if SOURCE_DOCUMENTS_DIR.exists():
        md_files = list(SOURCE_DOCUMENTS_DIR.rglob("*.md"))
        if not md_files:
            errors.append("Nenhum arquivo Markdown encontrado para indexa√ß√£o")
    
    return errors

if __name__ == "__main__":
    # Criar diret√≥rios necess√°rios
    create_directories()
    
    # Validar ambiente
    errors = validate_environment()
    if errors:
        print("‚ùå Erros de configura√ß√£o encontrados:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("‚úÖ Ambiente configurado corretamente!")