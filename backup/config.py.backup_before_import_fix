"""Configurações centralizadas para o sistema RAG."""

from pathlib import Path
import os

# Diretório base do projeto
PROJECT_ROOT = Path(__file__).parent.parent
RAG_INFRA_ROOT = Path(__file__).parent

# Diretórios principais (nova estrutura)
RESULTS_AND_REPORTS_DIR = RAG_INFRA_ROOT / "reports" / "results_and_reports"
LOGS_DIR = RAG_INFRA_ROOT / "temp" / "logs" / "application"
DATA_INDEX_DIR = RAG_INFRA_ROOT / "data" / "indexes"
SOURCE_DOCUMENTS_DIR = RAG_INFRA_ROOT / "data" / "source_documents"

# Diretórios organizacionais (nova estrutura)
DIAGNOSTICS_DIR = RAG_INFRA_ROOT / "diagnostics"
SERVER_DIR = RAG_INFRA_ROOT / "server"
SETUP_DIR = RAG_INFRA_ROOT / "setup"
TESTS_DIR = RAG_INFRA_ROOT / "src" / "tests"
SCRIPTS_DIR = RAG_INFRA_ROOT / "scripts"
CORE_LOGIC_DIR = RAG_INFRA_ROOT / "src" / "core" / "core_logic"
UTILS_DIR = RAG_INFRA_ROOT / "src" / "utils"

# Garantir que os diretórios existam
RESULTS_AND_REPORTS_DIR.mkdir(exist_ok=True)
LOGS_DIR.mkdir(exist_ok=True)
DIAGNOSTICS_DIR.mkdir(exist_ok=True)
SERVER_DIR.mkdir(exist_ok=True)
SETUP_DIR.mkdir(exist_ok=True)

# Funções utilitárias para caminhos de relatórios
def get_report_path(report_name: str) -> Path:
    """Retorna o caminho completo para um arquivo de relatório.
    
    Args:
        report_name: Nome do arquivo de relatório (ex: 'rag_test_report.json')
        
    Returns:
        Path: Caminho completo para o arquivo no diretório results_and_reports
    """
    if not report_name.endswith('.json'):
        report_name += '.json'
    return RESULTS_AND_REPORTS_DIR / report_name

def get_log_path(log_name: str) -> Path:
    """Retorna o caminho completo para um arquivo de log.
    
    Args:
        log_name: Nome do arquivo de log (ex: 'rag_test.log')
        
    Returns:
        Path: Caminho completo para o arquivo no diretório logs
    """
    if not log_name.endswith('.log'):
        log_name += '.log'
    return LOGS_DIR / log_name

# Configurações específicas do RAG
RAG_CONFIG = {
    'model_name': 'BAAI/bge-m3',
    'device': 'auto',  # 'cuda', 'cpu', ou 'auto'
    'max_length': 8192,
    'batch_size': 32,
    'top_k_default': 5,
    'similarity_threshold': 0.2
}

# Configurações de logging
LOGGING_CONFIG = {
    'level': 'INFO',
    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    'file_handler': True,
    'console_handler': True
}

# Configurações de relatórios
REPORT_CONFIG = {
    'encoding': 'utf-8',
    'indent': 2,
    'ensure_ascii': False
}

# Funções utilitárias para módulos reorganizados
def get_module_path(module_category: str, module_name: str = None) -> Path:
    """Retorna o caminho para um módulo específico na estrutura reorganizada.
    
    Args:
        module_category: Categoria do módulo ('diagnostics', 'server', 'setup', etc.)
        module_name: Nome específico do módulo (opcional)
        
    Returns:
        Path: Caminho para o diretório ou arquivo do módulo
    """
    category_dirs = {
        'diagnostics': DIAGNOSTICS_DIR,
        'server': SERVER_DIR,
        'setup': SETUP_DIR,
        'tests': TESTS_DIR,
        'scripts': SCRIPTS_DIR,
        'core_logic': CORE_LOGIC_DIR,
        'utils': UTILS_DIR
    }
    
    base_dir = category_dirs.get(module_category)
    if not base_dir:
        raise ValueError(f"Categoria de módulo desconhecida: {module_category}")
    
    if module_name:
        if not module_name.endswith('.py'):
            module_name += '.py'
        return base_dir / module_name
    
    return base_dir

def add_module_to_path(module_category: str):
    """Adiciona um diretório de módulo ao sys.path para facilitar imports.
    
    Args:
        module_category: Categoria do módulo a ser adicionada ao path
    """
    import sys
    module_dir = get_module_path(module_category)
    if str(module_dir) not in sys.path:
        sys.path.insert(0, str(module_dir))

# Mapeamento de arquivos reorganizados (para compatibilidade)
REORGANIZED_FILES = {
    'correcao_rag.py': 'diagnostics/correcao_rag.py',
    'diagnostico_rag.py': 'diagnostics/diagnostico_rag.py',
    'diagnostico_simples.py': 'diagnostics/diagnostico_simples.py',
    'mcp_server.py': 'server/mcp_server.py',
    'setup_rag.py': 'setup/setup_rag.py',
    'test_rag_quick.py': 'tests/test_rag_quick.py'
}