# -*- coding: utf-8 -*-
"""
Utilit√°rios Consolidados RAG - Recoloca.ai

Este m√≥dulo unifica todas as funcionalidades utilit√°rias do sistema RAG,
consolidando scripts de verifica√ß√£o, debug, corre√ß√£o de √≠ndices e testes.

Funcionalidades consolidadas:
- check_backend.py
- debug_pytorch_init.py
- fix_index_loading.py
- fix_index_consistency.py
- test_rag_final.py

Autor: @AgenteM_DevFastAPI
Vers√£o: 2.0 (Consolidado)
Data: Junho 2025
"""

import sys
import os
import json
import logging
import time
import traceback
import tempfile
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass
from abc import ABC, abstractmethod

# Adicionar o diret√≥rio core_logic ao path
sys.path.insert(0, str(Path(__file__).parent.parent / "core_logic"))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rag_utilities.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class UtilityResult:
    """Resultado de uma opera√ß√£o utilit√°ria."""
    operation_name: str
    success: bool
    message: str
    details: Dict[str, Any] = None
    execution_time: float = 0.0
    data: Any = None
    
    def __post_init__(self):
        if self.details is None:
            self.details = {}

class UtilityInterface(ABC):
    """Interface base para utilit√°rios."""
    
    @abstractmethod
    def execute(self) -> UtilityResult:
        """Executa a opera√ß√£o utilit√°ria."""
        pass

class BackendChecker(UtilityInterface):
    """Verificador de configura√ß√£o do backend RAG."""
    
    def execute(self) -> UtilityResult:
        """Verifica qual backend RAG est√° sendo usado."""
        start_time = time.time()
        details = {}
        
        try:
            print("üîç Verificando configura√ß√£o do backend RAG...")
            print("=" * 50)
            
            # Verificar imports b√°sicos
            try:
                from rag_retriever import get_retriever
                details['rag_retriever_import'] = True
            except ImportError as e:
                details['rag_retriever_import'] = False
                details['rag_retriever_error'] = str(e)
                return UtilityResult(
                    operation_name="Backend Check",
                    success=False,
                    message=f"Erro ao importar rag_retriever: {e}",
                    details=details,
                    execution_time=time.time() - start_time
                )
            
            # Obter retriever
            retriever = get_retriever()
            
            # Informa√ß√µes b√°sicas
            backend_type = 'PyTorch' if getattr(retriever, 'use_pytorch', False) else 'FAISS'
            details['backend_type'] = backend_type
            details['force_cpu'] = getattr(retriever, 'force_cpu', None)
            details['force_pytorch'] = getattr(retriever, 'force_pytorch', None)
            details['use_optimizations'] = getattr(retriever, 'use_optimizations', None)
            
            print(f"Backend em uso: {backend_type}")
            print(f"Force CPU: {details['force_cpu']}")
            print(f"Force PyTorch: {details['force_pytorch']}")
            print(f"Otimiza√ß√µes ativadas: {details['use_optimizations']}")
            
            # Informa√ß√µes detalhadas do backend
            if hasattr(retriever, 'get_backend_info'):
                backend_info = retriever.get_backend_info()
                details['backend_info'] = backend_info
                print("\nüìä Informa√ß√µes do Backend:")
                for key, value in backend_info.items():
                    print(f"  {key}: {value}")
            
            # Verificar FAISS
            print("\nüîß Verifica√ß√£o FAISS:")
            try:
                import faiss
                faiss_version = getattr(faiss, '__version__', 'Desconhecida')
                details['faiss'] = {
                    'available': True,
                    'version': faiss_version,
                    'gpu_available': hasattr(faiss, 'StandardGpuResources')
                }
                print(f"  FAISS vers√£o: {faiss_version}")
                
                if hasattr(faiss, 'StandardGpuResources'):
                    print("  ‚úÖ FAISS-GPU dispon√≠vel")
                else:
                    print("  ‚ùå FAISS-GPU n√£o dispon√≠vel")
                    
            except ImportError as e:
                details['faiss'] = {'available': False, 'error': str(e)}
                print(f"  ‚ùå Erro ao importar FAISS: {e}")
            
            # Verificar PyTorch
            print("\nüî• Verifica√ß√£o PyTorch:")
            try:
                import torch
                details['pytorch'] = {
                    'available': True,
                    'version': torch.__version__,
                    'cuda_available': torch.cuda.is_available(),
                    'device_count': torch.cuda.device_count() if torch.cuda.is_available() else 0
                }
                
                print(f"  PyTorch vers√£o: {torch.__version__}")
                print(f"  CUDA dispon√≠vel: {torch.cuda.is_available()}")
                
                if torch.cuda.is_available():
                    print(f"  Dispositivos CUDA: {torch.cuda.device_count()}")
                    for i in range(torch.cuda.device_count()):
                        print(f"    GPU {i}: {torch.cuda.get_device_name(i)}")
                        details['pytorch'][f'gpu_{i}'] = torch.cuda.get_device_name(i)
                        
            except ImportError as e:
                details['pytorch'] = {'available': False, 'error': str(e)}
                print(f"  ‚ùå Erro ao importar PyTorch: {e}")
            
            execution_time = time.time() - start_time
            
            return UtilityResult(
                operation_name="Backend Check",
                success=True,
                message=f"Backend verificado: {backend_type}",
                details=details,
                execution_time=execution_time,
                data={'backend_type': backend_type, 'retriever': retriever}
            )
            
        except Exception as e:
            return UtilityResult(
                operation_name="Backend Check",
                success=False,
                message=f"Erro na verifica√ß√£o do backend: {e}",
                details={'exception': str(e), 'traceback': traceback.format_exc()},
                execution_time=time.time() - start_time
            )

class PyTorchInitDebugger(UtilityInterface):
    """Debugger de inicializa√ß√£o do PyTorch."""
    
    def execute(self) -> UtilityResult:
        """Debug da inicializa√ß√£o do PyTorchGPURetriever."""
        start_time = time.time()
        details = {}
        
        try:
            print("=== DEBUG PYTORCH INITIALIZATION ===")
            print(f"Python version: {sys.version}")
            print(f"Working directory: {os.getcwd()}")
            
            core_logic_dir = Path(__file__).parent.parent / "core_logic"
            print(f"Core logic dir: {core_logic_dir}")
            print(f"Core logic exists: {core_logic_dir.exists()}")
            
            details['python_version'] = sys.version
            details['working_directory'] = os.getcwd()
            details['core_logic_dir'] = str(core_logic_dir)
            details['core_logic_exists'] = core_logic_dir.exists()
            
            # Teste 1: Importa√ß√£o de constantes
            print("\n1. Testando importa√ß√£o de constantes...")
            try:
                from constants import PYTORCH_INDEX_DIR, PYTORCH_DOCUMENTS_FILE, PYTORCH_METADATA_FILE
                
                details['constants'] = {
                    'imported': True,
                    'pytorch_index_dir': str(PYTORCH_INDEX_DIR),
                    'dir_exists': PYTORCH_INDEX_DIR.exists(),
                    'documents_file_exists': (PYTORCH_INDEX_DIR / PYTORCH_DOCUMENTS_FILE).exists(),
                    'metadata_file_exists': (PYTORCH_INDEX_DIR / PYTORCH_METADATA_FILE).exists(),
                    'embeddings_file_exists': (PYTORCH_INDEX_DIR / 'embeddings.pt').exists()
                }
                
                print(f"‚úÖ Constantes importadas com sucesso")
                print(f"PYTORCH_INDEX_DIR: {PYTORCH_INDEX_DIR}")
                print(f"Directory exists: {PYTORCH_INDEX_DIR.exists()}")
                print(f"Documents file exists: {(PYTORCH_INDEX_DIR / PYTORCH_DOCUMENTS_FILE).exists()}")
                print(f"Metadata file exists: {(PYTORCH_INDEX_DIR / PYTORCH_METADATA_FILE).exists()}")
                print(f"Embeddings file exists: {(PYTORCH_INDEX_DIR / 'embeddings.pt').exists()}")
                
            except Exception as e:
                details['constants'] = {'imported': False, 'error': str(e)}
                print(f"‚ùå Erro ao importar constantes: {e}")
                return UtilityResult(
                    operation_name="PyTorch Init Debug",
                    success=False,
                    message=f"Falha na importa√ß√£o de constantes: {e}",
                    details=details,
                    execution_time=time.time() - start_time
                )
            
            # Teste 2: Importa√ß√£o do PyTorchGPURetriever
            print("\n2. Testando importa√ß√£o do PyTorchGPURetriever...")
            try:
                from pytorch_gpu_retriever import PyTorchGPURetriever
                details['pytorch_gpu_retriever'] = {'imported': True}
                print(f"‚úÖ PyTorchGPURetriever importado com sucesso")
            except Exception as e:
                details['pytorch_gpu_retriever'] = {'imported': False, 'error': str(e)}
                print(f"‚ùå Erro ao importar PyTorchGPURetriever: {e}")
                return UtilityResult(
                    operation_name="PyTorch Init Debug",
                    success=False,
                    message=f"Falha na importa√ß√£o do PyTorchGPURetriever: {e}",
                    details=details,
                    execution_time=time.time() - start_time
                )
            
            # Teste 3: Inicializa√ß√£o do PyTorchGPURetriever
            print("\n3. Testando inicializa√ß√£o do PyTorchGPURetriever...")
            try:
                retriever = PyTorchGPURetriever(force_cpu=False)
                device = getattr(retriever, 'device', 'unknown')
                details['retriever_init'] = {
                    'success': True,
                    'device': str(device)
                }
                print(f"‚úÖ PyTorchGPURetriever criado com sucesso")
                print(f"Device: {device}")
            except Exception as e:
                details['retriever_init'] = {'success': False, 'error': str(e)}
                print(f"‚ùå Erro ao criar PyTorchGPURetriever: {e}")
                return UtilityResult(
                    operation_name="PyTorch Init Debug",
                    success=False,
                    message=f"Falha na inicializa√ß√£o do PyTorchGPURetriever: {e}",
                    details=details,
                    execution_time=time.time() - start_time
                )
            
            execution_time = time.time() - start_time
            
            return UtilityResult(
                operation_name="PyTorch Init Debug",
                success=True,
                message="Debug do PyTorch conclu√≠do com sucesso",
                details=details,
                execution_time=execution_time
            )
            
        except Exception as e:
            return UtilityResult(
                operation_name="PyTorch Init Debug",
                success=False,
                message=f"Erro no debug do PyTorch: {e}",
                details={'exception': str(e), 'traceback': traceback.format_exc()},
                execution_time=time.time() - start_time
            )

class IndexConsistencyChecker(UtilityInterface):
    """Verificador de consist√™ncia do √≠ndice."""
    
    def execute(self) -> UtilityResult:
        """Verifica a consist√™ncia do √≠ndice FAISS/PyTorch."""
        start_time = time.time()
        details = {}
        
        try:
            print("üîç Verificando consist√™ncia do √≠ndice...")
            print("=" * 50)
            
            base_dir = Path(__file__).parent.parent
            
            # Verificar √≠ndice FAISS
            faiss_dir = base_dir / "data_index" / "faiss_index_bge_m3"
            details['faiss_index'] = self._check_index_consistency(faiss_dir, 'FAISS')
            
            # Verificar √≠ndice PyTorch
            pytorch_dir = base_dir / "data_index" / "pytorch_index_bge_m3"
            details['pytorch_index'] = self._check_index_consistency(pytorch_dir, 'PyTorch')
            
            # An√°lise geral
            faiss_consistent = details['faiss_index']['consistent']
            pytorch_consistent = details['pytorch_index']['consistent']
            
            print("\n=== RESUMO DE CONSIST√äNCIA ===")
            print(f"FAISS Index: {'‚úÖ Consistente' if faiss_consistent else '‚ùå Inconsistente'}")
            print(f"PyTorch Index: {'‚úÖ Consistente' if pytorch_consistent else '‚ùå Inconsistente'}")
            
            overall_success = faiss_consistent or pytorch_consistent
            
            execution_time = time.time() - start_time
            
            return UtilityResult(
                operation_name="Index Consistency Check",
                success=overall_success,
                message=f"Verifica√ß√£o conclu√≠da - FAISS: {faiss_consistent}, PyTorch: {pytorch_consistent}",
                details=details,
                execution_time=execution_time
            )
            
        except Exception as e:
            return UtilityResult(
                operation_name="Index Consistency Check",
                success=False,
                message=f"Erro na verifica√ß√£o de consist√™ncia: {e}",
                details={'exception': str(e), 'traceback': traceback.format_exc()},
                execution_time=time.time() - start_time
            )
    
    def _check_index_consistency(self, index_dir: Path, backend_name: str) -> Dict[str, Any]:
        """Verifica consist√™ncia de um √≠ndice espec√≠fico."""
        result = {
            'backend': backend_name,
            'directory': str(index_dir),
            'exists': index_dir.exists(),
            'consistent': False,
            'files': {},
            'counts': {},
            'errors': []
        }
        
        if not index_dir.exists():
            result['errors'].append(f"Diret√≥rio {index_dir} n√£o existe")
            return result
        
        try:
            # Arquivos esperados
            expected_files = {
                'documents.json': index_dir / "documents.json",
                'metadata.json': index_dir / "metadata.json"
            }
            
            if backend_name == 'FAISS':
                expected_files.update({
                    'faiss_index.bin': index_dir / "faiss_index.bin",
                    'embeddings.npy': index_dir / "embeddings.npy"
                })
            else:  # PyTorch
                expected_files.update({
                    'embeddings.pt': index_dir / "embeddings.pt",
                    'mapping.json': index_dir / "mapping.json"
                })
            
            # Verificar exist√™ncia dos arquivos
            for name, filepath in expected_files.items():
                exists = filepath.exists()
                size = filepath.stat().st_size if exists else 0
                result['files'][name] = {
                    'exists': exists,
                    'size': size,
                    'path': str(filepath)
                }
                
                if not exists:
                    result['errors'].append(f"Arquivo {name} n√£o encontrado")
            
            # Se arquivos b√°sicos existem, verificar consist√™ncia
            docs_file = expected_files['documents.json']
            meta_file = expected_files['metadata.json']
            
            if docs_file.exists() and meta_file.exists():
                # Carregar documentos
                with open(docs_file, 'r', encoding='utf-8') as f:
                    documents = json.load(f)
                result['counts']['documents'] = len(documents)
                
                # Carregar metadados
                with open(meta_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                docs_metadata = metadata.get("documents_metadata", [])
                result['counts']['metadata'] = len(docs_metadata)
                
                # Verificar embeddings
                if backend_name == 'FAISS':
                    emb_file = expected_files['embeddings.npy']
                    if emb_file.exists():
                        import numpy as np
                        embeddings = np.load(emb_file)
                        result['counts']['embeddings'] = embeddings.shape[0]
                        result['embedding_shape'] = list(embeddings.shape)
                else:  # PyTorch
                    emb_file = expected_files['embeddings.pt']
                    if emb_file.exists():
                        import torch
                        embeddings = torch.load(emb_file, map_location='cpu')
                        result['counts']['embeddings'] = embeddings.shape[0]
                        result['embedding_shape'] = list(embeddings.shape)
                
                # Verificar consist√™ncia dos counts
                doc_count = result['counts'].get('documents', 0)
                meta_count = result['counts'].get('metadata', 0)
                emb_count = result['counts'].get('embeddings', 0)
                
                print(f"\nüìä {backend_name} Index:")
                print(f"  Documentos: {doc_count}")
                print(f"  Metadados: {meta_count}")
                print(f"  Embeddings: {emb_count}")
                
                if doc_count == meta_count == emb_count and doc_count > 0:
                    result['consistent'] = True
                    print(f"  ‚úÖ Consistente")
                else:
                    result['errors'].append(f"Inconsist√™ncia: docs={doc_count}, meta={meta_count}, emb={emb_count}")
                    print(f"  ‚ùå Inconsistente")
            
        except Exception as e:
            result['errors'].append(f"Erro na verifica√ß√£o: {e}")
        
        return result

class RAGUtilitiesRunner:
    """Executor principal dos utilit√°rios RAG."""
    
    def __init__(self):
        self.utilities = {
            'backend_check': BackendChecker(),
            'pytorch_debug': PyTorchInitDebugger(),
            'index_consistency': IndexConsistencyChecker()
        }
        self.results = {}
    
    def run_utility(self, utility_name: str) -> UtilityResult:
        """Executa um utilit√°rio espec√≠fico."""
        if utility_name not in self.utilities:
            return UtilityResult(
                operation_name=utility_name,
                success=False,
                message=f"Utilit√°rio '{utility_name}' n√£o encontrado"
            )
        
        print(f"\nüîß Executando: {utility_name}")
        print("=" * 50)
        
        result = self.utilities[utility_name].execute()
        self.results[utility_name] = result
        
        status = "‚úÖ" if result.success else "‚ùå"
        print(f"\n{status} {result.operation_name}: {result.message}")
        print(f"Tempo: {result.execution_time:.3f}s")
        
        return result
    
    def run_all_utilities(self) -> Dict[str, UtilityResult]:
        """Executa todos os utilit√°rios."""
        print("üõ†Ô∏è  UTILIT√ÅRIOS RAG - EXECU√á√ÉO COMPLETA")
        print("=" * 60)
        
        for utility_name in self.utilities.keys():
            try:
                self.run_utility(utility_name)
            except Exception as e:
                error_result = UtilityResult(
                    operation_name=utility_name,
                    success=False,
                    message=f"Erro inesperado: {e}",
                    details={'exception': str(e), 'traceback': traceback.format_exc()}
                )
                self.results[utility_name] = error_result
                print(f"‚ùå {utility_name}: Erro inesperado: {e}")
        
        self._print_summary()
        return self.results
    
    def _print_summary(self):
        """Imprime resumo dos resultados."""
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS UTILIT√ÅRIOS")
        print("=" * 60)
        
        successful = sum(1 for r in self.results.values() if r.success)
        total = len(self.results)
        
        print(f"‚úÖ Sucessos: {successful}/{total}")
        print(f"‚ùå Falhas: {total - successful}/{total}")
        print(f"‚è±Ô∏è  Tempo total: {sum(r.execution_time for r in self.results.values()):.3f}s")
        
        if total - successful > 0:
            print("\nüö® UTILIT√ÅRIOS COM FALHAS:")
            for name, result in self.results.items():
                if not result.success:
                    print(f"   ‚Ä¢ {name}: {result.message}")
        
        print("\nüèÅ UTILIT√ÅRIOS CONCLU√çDOS")
    
    def save_report(self, filepath: str = "rag_utilities_report.json"):
        """Salva relat√≥rio detalhado em JSON."""
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'summary': {
                'total_utilities': len(self.results),
                'successful_utilities': sum(1 for r in self.results.values() if r.success),
                'failed_utilities': sum(1 for r in self.results.values() if not r.success),
                'total_execution_time': sum(r.execution_time for r in self.results.values())
            },
            'results': {
                name: {
                    'operation_name': result.operation_name,
                    'success': result.success,
                    'message': result.message,
                    'execution_time': result.execution_time,
                    'details': result.details,
                    'data': result.data if hasattr(result, 'data') and result.data is not None else None
                }
                for name, result in self.results.items()
            }
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüìÑ Relat√≥rio salvo em: {filepath}")

def main():
    """Fun√ß√£o principal para execu√ß√£o standalone."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Utilit√°rios RAG Consolidados')
    parser.add_argument('--utility', type=str, choices=['backend_check', 'pytorch_debug', 'index_consistency', 'all'],
                       default='all', help='Utilit√°rio espec√≠fico para executar')
    parser.add_argument('--report', type=str, default='rag_utilities_report.json',
                       help='Arquivo para salvar relat√≥rio')
    
    args = parser.parse_args()
    
    runner = RAGUtilitiesRunner()
    
    if args.utility == 'all':
        results = runner.run_all_utilities()
    else:
        result = runner.run_utility(args.utility)
        results = {args.utility: result}
    
    runner.save_report(args.report)
    
    # Retornar c√≥digo de sa√≠da baseado nos resultados
    failed_utilities = sum(1 for r in results.values() if not r.success)
    return 0 if failed_utilities == 0 else 1

if __name__ == "__main__":
    sys.exit(main())