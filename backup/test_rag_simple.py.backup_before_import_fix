#!/usr/bin/env python3
"""
Teste Simples de Integra√ß√£o do RAGRetriever

Testa apenas a detec√ß√£o de backend e inicializa√ß√£o b√°sica
sem carregar modelos pesados.
"""

import sys
import os
import logging
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from rag_infra.core_logic.rag_retriever import RAGRetriever

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_backend_detection():
    """
    Testa apenas a detec√ß√£o de backend sem inicializa√ß√£o completa.
    """
    print("üîç Testando detec√ß√£o de backend...")
    
    try:
        # 1. Detec√ß√£o autom√°tica
        retriever_auto = RAGRetriever()
        print(f"  Auto: Backend = {'PyTorch' if retriever_auto.use_pytorch else 'FAISS'}")
        print(f"        force_cpu = {retriever_auto.force_cpu}")
        print(f"        force_pytorch = {retriever_auto.force_pytorch}")
        
        # 2. For√ßar PyTorch
        retriever_pytorch = RAGRetriever(force_pytorch=True)
        print(f"  PyTorch: Backend = {'PyTorch' if retriever_pytorch.use_pytorch else 'FAISS'}")
        print(f"           force_pytorch = {retriever_pytorch.force_pytorch}")
        
        # 3. For√ßar CPU
        retriever_cpu = RAGRetriever(force_cpu=True)
        print(f"  CPU: Backend = {'PyTorch' if retriever_cpu.use_pytorch else 'FAISS'}")
        print(f"       force_cpu = {retriever_cpu.force_cpu}")
        
        # 4. Tentar for√ßar FAISS
        retriever_faiss = RAGRetriever(force_pytorch=False)
        print(f"  FAISS: Backend = {'PyTorch' if retriever_faiss.use_pytorch else 'FAISS'}")
        print(f"         force_pytorch = {retriever_faiss.force_pytorch}")
        
        print("‚úÖ Detec√ß√£o de backend funcionando")
        assert True
        
    except Exception as e:
        print(f"‚ùå Erro na detec√ß√£o de backend: {e}")
        assert False, f"Erro na detec√ß√£o de backend: {e}"

def test_gpu_compatibility():
    """
    Testa a detec√ß√£o de compatibilidade GPU.
    """
    print("\nüîß Testando compatibilidade GPU...")
    
    try:
        # Importar fun√ß√£o de detec√ß√£o
        # from retriever import _detect_gpu_compatibility  # Fun√ß√£o pode n√£o existir mais
        
        compatibility = _detect_gpu_compatibility()
        print(f"  GPU Compat√≠vel: {compatibility}")
        
        # Verificar CUDA
        try:
            import torch
            cuda_available = torch.cuda.is_available()
            print(f"  CUDA Dispon√≠vel: {cuda_available}")
            
            if cuda_available:
                gpu_name = torch.cuda.get_device_name(0)
                print(f"  GPU: {gpu_name}")
                
        except ImportError:
            print("  PyTorch n√£o dispon√≠vel")
        
        print("‚úÖ Teste de compatibilidade GPU conclu√≠do")
        assert True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de compatibilidade: {e}")
        assert False, f"Erro no teste de compatibilidade: {e}"

def test_pytorch_retriever_creation():
    """
    Testa apenas a cria√ß√£o do PyTorchGPURetriever sem inicializa√ß√£o.
    """
    print("\nüèóÔ∏è Testando cria√ß√£o do PyTorchGPURetriever...")
    
    try:
        from pytorch_gpu_retriever import PyTorchGPURetriever
        
        # Criar retriever sem inicializar
        retriever = PyTorchGPURetriever(force_cpu=True)  # Usar CPU para evitar problemas
        print(f"  Retriever criado: {type(retriever).__name__}")
        print(f"  Force CPU: {retriever.force_cpu}")
        print(f"  Device: {retriever.device}")
        print(f"  Batch Size: {retriever.batch_size}")
        
        # Testar m√©todo get_index_info sem inicializa√ß√£o
        info = retriever.get_index_info()
        print(f"  Index Info: {info}")
        
        print("‚úÖ Cria√ß√£o do PyTorchGPURetriever funcionando")
        assert True
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o do PyTorchGPURetriever: {e}")
        assert False, f"Erro na cria√ß√£o do PyTorchGPURetriever: {e}"

def test_rag_retriever_methods():
    """
    Testa m√©todos b√°sicos do RAGRetriever sem inicializa√ß√£o completa.
    """
    print("\nüîç Testando m√©todos do RAGRetriever...")
    
    try:
        retriever = RAGRetriever(force_pytorch=True)
        
        # Testar get_index_info sem inicializa√ß√£o
        info = retriever.get_index_info()
        print(f"  Index Info (n√£o inicializado): {info}")
        
        # Testar clear_cache
        retriever.clear_cache()
        print("  Clear cache: OK")
        
        print("‚úÖ M√©todos b√°sicos do RAGRetriever funcionando")
        assert True
        
    except Exception as e:
        print(f"‚ùå Erro nos m√©todos do RAGRetriever: {e}")
        assert False, f"Erro nos m√©todos do RAGRetriever: {e}"

def main():
    """
    Executa todos os testes simples.
    """
    print("üß™ RAG Simple Integration Test")
    print("=" * 40)
    
    tests = [
        test_backend_detection,
        test_gpu_compatibility,
        test_pytorch_retriever_creation,
        test_rag_retriever_methods
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erro no teste {test.__name__}: {e}")
            results.append(False)
    
    # Resumo
    print("\nüìä RESUMO DOS TESTES")
    print("=" * 25)
    
    passed = sum(results)
    total = len(results)
    
    print(f"Testes Passaram: {passed}/{total}")
    print(f"Taxa de Sucesso: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\n‚úÖ Todos os testes passaram! Sistema b√°sico funcionando.")
        print("\nüéØ Pr√≥ximos passos:")
        print("  1. Otimizar carregamento de modelos")
        print("  2. Implementar testes de performance")
        print("  3. Configurar cache persistente")
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam. Revisar configura√ß√£o.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)