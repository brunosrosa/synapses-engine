#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para demonstrar os benef√≠cios das otimiza√ß√µes do RAG
"""

import sys
import time
from pathlib import Path

# Adicionar core_logic ao path
sys.path.append(str(Path(__file__).parent / "rag_infra" / "core_logic"))

try:
    # from retriever import get_retriever  # Fun√ß√£o pode n√£o existir mais
    
    print("üöÄ Demonstra√ß√£o: Otimiza√ß√µes RAG")
    print("=" * 60)
    
    # Teste 1: Retriever sem otimiza√ß√µes
    print("\nüìä TESTE 1: Retriever Padr√£o (sem otimiza√ß√µes)")
    print("-" * 50)
    
    from rag_retriever import RAGRetriever
    retriever_normal = RAGRetriever(use_optimizations=False)
    
    # Consultas de teste
    test_queries = [
        "Como funciona o sistema de autentica√ß√£o?",
        "Quais s√£o os requisitos funcionais principais?",
        "Arquitetura do backend FastAPI",
        "Integra√ß√£o com Supabase",
        "Como funciona o sistema de autentica√ß√£o?"  # Repetida para testar cache
    ]
    
    start_time = time.time()
    results_normal = []
    
    for i, query in enumerate(test_queries, 1):
        query_start = time.time()
        if not retriever_normal.is_loaded:
            retriever_normal.initialize()
            retriever_normal.load_index()
        results = retriever_normal.search(query, top_k=3)
        query_time = time.time() - query_start
        
        results_normal.append((query, results, query_time))
        print(f"  Query {i}: {query_time:.3f}s - {len(results)} resultados")
    
    total_time_normal = time.time() - start_time
    print(f"\n  ‚è±Ô∏è Tempo total: {total_time_normal:.3f}s")
    print(f"  üìà Tempo m√©dio por query: {total_time_normal/len(test_queries):.3f}s")
    
    # Teste 2: Retriever com otimiza√ß√µes
    print("\n\nüî• TESTE 2: Retriever Otimizado (com cache e otimiza√ß√µes)")
    print("-" * 50)
    
    retriever_optimized = RAGRetriever(
        use_optimizations=True,
        cache_enabled=True,
        batch_size=8
    )
    
    start_time = time.time()
    results_optimized = []
    
    for i, query in enumerate(test_queries, 1):
        query_start = time.time()
        if not retriever_optimized.is_loaded:
            retriever_optimized.initialize()
            retriever_optimized.load_index()
        results = retriever_optimized.search(query, top_k=3)
        query_time = time.time() - query_start
        
        results_optimized.append((query, results, query_time))
        cache_status = "[CACHE HIT]" if query_time < 0.01 else "[CACHE MISS]"
        print(f"  Query {i}: {query_time:.3f}s - {len(results)} resultados {cache_status}")
    
    total_time_optimized = time.time() - start_time
    print(f"\n  ‚è±Ô∏è Tempo total: {total_time_optimized:.3f}s")
    print(f"  üìà Tempo m√©dio por query: {total_time_optimized/len(test_queries):.3f}s")
    
    # Compara√ß√£o
    print("\n\nüìä COMPARA√á√ÉO DE PERFORMANCE")
    print("=" * 60)
    
    improvement = ((total_time_normal - total_time_optimized) / total_time_normal) * 100
    speedup = total_time_normal / total_time_optimized if total_time_optimized > 0 else float('inf')
    
    print(f"üî∏ Sem otimiza√ß√µes:    {total_time_normal:.3f}s")
    print(f"üî• Com otimiza√ß√µes:    {total_time_optimized:.3f}s")
    print(f"‚ö° Melhoria:           {improvement:.1f}%")
    print(f"üöÄ Speedup:            {speedup:.1f}x mais r√°pido")
    
    # Estat√≠sticas do cache (se dispon√≠vel)
    if hasattr(retriever_optimized, 'pytorch_retriever') and hasattr(retriever_optimized.pytorch_retriever, 'stats'):
        stats = retriever_optimized.pytorch_retriever.stats
        print(f"\nüìà Estat√≠sticas do Cache:")
        print(f"  ‚Ä¢ Total de consultas: {stats.get('total_queries', 0)}")
        print(f"  ‚Ä¢ Cache hits: {stats.get('cache_hits', 0)}")
        print(f"  ‚Ä¢ Cache misses: {stats.get('cache_misses', 0)}")
        
        if stats.get('total_queries', 0) > 0:
            hit_rate = (stats.get('cache_hits', 0) / stats.get('total_queries', 1)) * 100
            print(f"  ‚Ä¢ Taxa de acerto: {hit_rate:.1f}%")
    
    # Benef√≠cios das otimiza√ß√µes
    print("\n\nüéØ BENEF√çCIOS DAS OTIMIZA√á√ïES (use_optimizations=True)")
    print("=" * 60)
    print("‚úÖ Cache Persistente:")
    print("   ‚Ä¢ Armazena resultados de consultas anteriores")
    print("   ‚Ä¢ TTL configur√°vel (padr√£o: 1 hora)")
    print("   ‚Ä¢ LRU eviction para gerenciar mem√≥ria")
    print("   ‚Ä¢ Persist√™ncia em disco entre sess√µes")
    
    print("\n‚úÖ Batch Processing:")
    print("   ‚Ä¢ Processa m√∫ltiplas consultas simultaneamente")
    print("   ‚Ä¢ Otimiza√ß√£o de uso de GPU")
    print("   ‚Ä¢ Reduz overhead de inicializa√ß√£o")
    
    print("\n‚úÖ Otimiza√ß√£o de Mem√≥ria:")
    print("   ‚Ä¢ Gerenciamento inteligente de mem√≥ria GPU")
    print("   ‚Ä¢ Pool de conex√µes para embeddings")
    print("   ‚Ä¢ Cleanup autom√°tico de recursos")
    
    print("\n‚úÖ Estat√≠sticas e Monitoramento:")
    print("   ‚Ä¢ M√©tricas detalhadas de performance")
    print("   ‚Ä¢ Monitoramento de cache hit/miss")
    print("   ‚Ä¢ An√°lise de padr√µes de uso")
    
    print("\n\nüí° RECOMENDA√á√ÉO")
    print("=" * 60)
    print("Para produ√ß√£o e desenvolvimento ativo, recomenda-se:")
    print("")
    print("```python")
    print("retriever = get_retriever(")
    print("    use_optimizations=True,    # Ativa todas as otimiza√ß√µes")
    print("    cache_enabled=True,        # Cache persistente")
    print("    batch_size=8               # Batch otimizado para RTX 2060")
    print(")")
    print("```")
    
except Exception as e:
    print(f"‚ùå Erro: {e}")
    import traceback
    traceback.print_exc()